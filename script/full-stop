#!/usr/bin/env bash

set -eu
set -o pipefail

export DOTFILES_DIR="$HOME/.dotfiles"
export FULL_STOP_DIR="$DOTFILES_DIR/full-stop"

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

check_dotfiles_dir () {
  local current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

  if ! [ -d "$DOTFILES_DIR" ]
  then
    fail "expected to find a $DOTFILES_DIR directory"
  fi

  if [ "$FULL_STOP_DIR/script" != "$current_dir" ]
  then
    fail "your dotfiles must go in $DOTFILES_DIR, and Full Stop in $FULL_STOP_DIR"
  fi
}

update_dotfiles_dir () {
  info "updating $DOTFILES_DIR"
  ( cd "$DOTFILES_DIR" && git pull --rebase )
  info "updating $FULL_STOP_DIR"
  ( cd "$DOTFILES_DIR" && git submodule update --remote )
}

install_and_update_homebrew () {
  $FULL_STOP_DIR/homebrew/setup.sh
  info 'brew update'
  brew update
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  local not_nested_files=$(find -H "$DOTFILES_DIR" -mindepth 2 -maxdepth 2 -name '*.symlink' -not -path '*.git*' ; )
  local nested_files=$(find -H "$DOTFILES_DIR" -mindepth 3 -maxdepth 3 -name '*.symlink' -not -path '*.git*' ; )

  for src in $not_nested_files
  do
    path_without_symlink_suffix="${src%.*}"
    dst="$HOME/.$(basename $path_without_symlink_suffix)"
    link_file "$src" "$dst"
  done

  for src in $nested_files
  do
    path_without_symlink_suffix="${src%.*}"
    file_name="$(basename $path_without_symlink_suffix)"
    dir_name="$(basename $(dirname $path_without_symlink_suffix) )"
    dst_dir="$HOME/.$dir_name"

    mkdir $dst_dir 2>/dev/null || info "$dst_dir already exists"
    link_file "$src" "$dst_dir/$file_name"
  done
}

install_brew_packages () {
  if [ -f "$DOTFILES_DIR/Brewfile" ]
  then
    info 'brew bundle'
    ( cd "$DOTFILES_DIR" && brew bundle )
  else
    info 'Brewfile not found'
  fi
}

run_topic_installers () {
  # find the installers and run them iteratively
  for installer in $(find -H "$DOTFILES_DIR" -mindepth 2 -maxdepth 2 -name 'setup.sh' -not -path '*.git*')
  do
    info "sh -c $installer"
    sh -c $installer
  done
}


check_dotfiles_dir
update_dotfiles_dir
install_and_update_homebrew
install_brew_packages
run_topic_installers
install_dotfiles

success "Full Stop complete"
